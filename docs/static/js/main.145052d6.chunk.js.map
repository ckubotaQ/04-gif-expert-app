{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAY5C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKlB,SACI,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAfkB,SAACP,GAC3BF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFDO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAZAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEf,UAEP,CAACpB,IAEGqB,EDdsBM,CAAa3B,GAA/Ba,EAD0B,EAC/BN,KAAaa,EADkB,EAClBA,QACnB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IACnDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACX,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eACQA,GADUA,EAAIC,aEgBvBiB,EAzBM,WAAM,MAES1C,mBAAS,CAAC,WAFnB,mBAEpB2C,EAFoB,KAER5C,EAFQ,KAMvB,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACI4C,EAAWpB,KAAI,SAACT,EAAU8B,GAAX,OACZ,cAAC,EAAD,CAEA9B,SAAWA,GADLA,Y,MCZzB+B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.145052d6.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n    setInputValue(e.target.value)};\r\n    const handleSubmit = (e) =>{ \r\n        e.preventDefault();\r\n        if(inputValue.trim().length>2){\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            type=\"text\"\r\n            value= {inputValue}\r\n            onChange= {handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=3vYK06iSmPgVgAFgGbAwFPltIpjWwbRb`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    }\r\n\r\n    )\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n          <img src={url} alt={title}/>\r\n          <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem'\r\nexport const GifGrid = ({ category }) => {\r\n   const {data:images, loading}= useFetchGifs(category);\r\n    return (\r\n        <>\r\n        <h3 className=\"animate__animated animate__bounce\">{category}</h3>\r\n       {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n        <div className=\"card-grid\">\r\n            {images.map((img) => (\r\n                <GifGridItem key={img.id}\r\n                    {...img}\r\n                />\r\n            ))}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then(imgs =>{\r\n            setTimeout(() =>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false,\r\n                })\r\n            },3000)\r\n        })\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, {useState} from 'react';\r\nimport {AddCategory} from './components/AddCategory'\r\nimport {GifGrid} from './components/GifGrid'\r\nconst GifExpertApp = () => {\r\n// const categorys = ['Naruto', 'One Punch', 'Yugioh'];\r\nconst [categories, setCategories] = useState(['Naruto']);\r\n// const hamdleAdd = () => {\r\n//     setCategories([...categories, 'Dr.Stone']);\r\n// }\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n           \r\n            <ol>\r\n               {categories.map((category, i )=>\r\n                   <GifGrid\r\n                   key= {category}\r\n                   category ={category}/>\r\n               )}\r\n            </ol>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport  GifExpertApp  from \"./GifExpertApp\";\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}